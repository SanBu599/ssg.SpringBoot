package ssg.com.a.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.URLEncoder;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import ssg.com.a.MediaTypeUtiles;
import ssg.com.a.dto.PdsDto;
import ssg.com.a.service.PdsService;
import ssg.com.a.util.PdsUtil;

@RestController
public class PdsController {

	@Autowired
	PdsService service;
	
	@Autowired
	ServletContext servletContext;
	
	@GetMapping("pdslist")
	public List<PdsDto> pdslist(){
		System.out.println("PdsController pdslist() " + new Date());
		
		return service.pdslist();
	}
	
	@PostMapping("uploadPds")
	public String uploadPds(@RequestParam("uploadFile")MultipartFile uploadFile,
							PdsDto pds, HttpServletRequest request) {
		System.out.println("PdsController uploadPds() " + new Date());
		System.out.println(pds.toString());
		
		String path = request.getServletContext().getRealPath("/upload");
				
		String filename = uploadFile.getOriginalFilename();
		
		String newfilename = PdsUtil.getNewfileName(filename);
		
		String filepath = path + "/" + newfilename;
		
		System.out.println(filepath);		
				
		File f = new File(filepath);
		
		try {
			BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(f));
			
			os.write(uploadFile.getBytes());	// 실제 업로드되는 부분
			os.close();
			
		} catch (Exception e) {
			return "NO";
		} 
		
		// DB 등록
		PdsDto dto = new PdsDto(pds.getId(), 
								pds.getTitle(), 
								pds.getContent(), 
								filename, 
								newfilename);
		service.uploadPds(dto);
		
		return "YES";
	}
	
	
	
	@GetMapping("getPds")
	public PdsDto getPds(int seq) {
		System.out.println("PdsController getPds() " + new Date());
		
		return service.getPds(seq);		
	}
	
	@GetMapping("filedownload")
	public ResponseEntity<InputStreamResource> filedownload(int seq, 
								HttpServletRequest request, HttpServletResponse response) throws Exception{
		System.out.println("HelloController filedownload " + new Date());
		
		PdsDto pds = service.getPds(seq);
		
		// 경로
		String path = request.getServletContext().getRealPath("/upload");
		// String path = "d:\tmp";
		
		// 파일의 타입을 조사
		MediaType mediaType = MediaTypeUtiles.getMediaTypeForFileName(servletContext, pds.getFilename());
		System.out.println("filename:" + pds.getFilename());
		System.out.println("mediaType:" + mediaType);
		
		File file = new File(path + File.separator + pds.getNewfilename());
		
		InputStreamResource is = new InputStreamResource(new FileInputStream(file));
		
		// db download count를 증가
		
		String filename = URLEncoder.encode(pds.getFilename(), "utf-8");
		
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=\"" + filename + "\"") // 원본파일명
				.contentType(mediaType)
				.contentLength(file.length()).body(is);		
	}
	

	
	@PostMapping("pdsUpdate")
	public String pdsUpdate(@RequestParam("uploadFile")MultipartFile uploadFile,
											PdsDto pds, 
											HttpServletRequest request) {
		
		boolean isS = service.pdsUpdate(pds);
		
		System.out.println("PdsController pdsUpdate" + new Date());
		
		String path = request.getServletContext().getRealPath("/upload");
		
		String filename = uploadFile.getOriginalFilename();
		
		if(filename != null && filename.equals("")) {
			String newfilename = PdsUtil.getNewfileName(filename);
			
			String filepath = path + "/" + newfilename;
			
			System.out.println(filepath);		
					
			File f = new File(filepath);
			
			try {
				BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(f));
				
				os.write(uploadFile.getBytes());	// 실제 업로드되는 부분
				os.close();
				
			} catch (Exception e) {
				isS= false;
			} 
		}
		
		int count = service.pdsUpdate(pds);
		
		if(count==0) {
			return "NO";
		}
		return "YES";
		
	}
}
